{-

  TASK 5 - Address encoder
  Write the method that for any valid MsgAddressInt with addr_std constructor
  without anycast
  (see https://github.com/ton-blockchain/ton/blob/master/crypto/block/block.tlb#L105)
 returns the slice that contain ASCII encoded base64url user-friendly bouncable
 address (without test-only flag), see https://ton.org/docs/#/howto/step-by-step?id=_1-smart-contract-addresses
-}

() recv_internal() {
}

;; testable
(slice) encode_address(slice Address) method_id {
    builder ans = begin_cell();
    Address~skip_bits(3);
    builder addr = begin_cell().store_uint(0x11,8).store_slice(Address~load_bits(264));
    slice s = addr.end_cell().begin_parse();
    (int i, int j, int crc) = (0, 0, 0);
    while(i < 34){
        crc ^= s~load_uint(8) << 8;
        while( j < 8){
            crc <<= 1;
            crc = crc ^ (0x11021 * ( (crc >> 16) % 2) );
            j += 1;
        }
        (i, j) = (i + 1, 0);
    }
    slice tc = addr.store_uint(crc,16).end_cell().begin_parse();
    slice base64url = begin_cell().store_uint(0x4142434445464748494a4b4c4d4e4f505152535455565758595a616263646566, 256).store_uint(0x6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f, 256).end_cell().begin_parse();
    int i = 0;
    while(i < 48){
        ans~store_uint(base64url.skip_bits( (tc~load_uint(6)) * 8).preload_uint(8) ,8);
        i += 1;
    }
    return ans.end_cell().begin_parse();
}
